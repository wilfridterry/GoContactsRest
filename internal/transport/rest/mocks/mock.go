// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock.go
//

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	reflect "reflect"

	domain "github.com/wilfridterry/contact-list/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockContacts is a mock of Contacts interface.
type MockContacts struct {
	ctrl     *gomock.Controller
	recorder *MockContactsMockRecorder
}

// MockContactsMockRecorder is the mock recorder for MockContacts.
type MockContactsMockRecorder struct {
	mock *MockContacts
}

// NewMockContacts creates a new mock instance.
func NewMockContacts(ctrl *gomock.Controller) *MockContacts {
	mock := &MockContacts{ctrl: ctrl}
	mock.recorder = &MockContactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContacts) EXPECT() *MockContactsMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockContacts) All(arg0 context.Context) ([]domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockContactsMockRecorder) All(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockContacts)(nil).All), arg0)
}

// Create mocks base method.
func (m *MockContacts) Create(arg0 context.Context, arg1 *domain.SaveInputContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContactsMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContacts)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockContacts) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContactsMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContacts)(nil).Delete), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockContacts) GetOne(arg0 context.Context, arg1 int64) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockContactsMockRecorder) GetOne(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockContacts)(nil).GetOne), arg0, arg1)
}

// Update mocks base method.
func (m *MockContacts) Update(arg0 context.Context, arg1 int64, arg2 *domain.SaveInputContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContactsMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContacts)(nil).Update), arg0, arg1, arg2)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// ParseJWTToken mocks base method.
func (m *MockAuth) ParseJWTToken(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTToken", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWTToken indicates an expected call of ParseJWTToken.
func (mr *MockAuthMockRecorder) ParseJWTToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTToken", reflect.TypeOf((*MockAuth)(nil).ParseJWTToken), arg0, arg1)
}

// RefreshTokens mocks base method.
func (m *MockAuth) RefreshTokens(arg0 context.Context, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockAuthMockRecorder) RefreshTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockAuth)(nil).RefreshTokens), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockAuth) SignUp(arg0 context.Context, arg1 *domain.SignUpInput) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthMockRecorder) SignUp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuth)(nil).SignUp), arg0, arg1)
}

// SingIn mocks base method.
func (m *MockAuth) SingIn(arg0 context.Context, arg1 *domain.SignInInput) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingIn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SingIn indicates an expected call of SingIn.
func (mr *MockAuthMockRecorder) SingIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingIn", reflect.TypeOf((*MockAuth)(nil).SingIn), arg0, arg1)
}
